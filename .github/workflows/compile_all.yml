name: Compile

on:
  workflow_dispatch:
    inputs:
      buildType:
        description: "Select the build type"
        required: true
        type: choice
        options:
          - "prerelease"
          - "all"
        default: "prerelease"

jobs:
  build:
    name: Build for ${{ matrix.target.name }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target:
          - { name: "esp32-generic", idf_target: "esp32",   sdkconfig_file: "configs/sdkconfig.default.esp32",      zip_name: "esp32-generic.zip" }
          - { name: "esp32s2-generic", idf_target: "esp32s2", sdkconfig_file: "configs/sdkconfig.default.esp32s2",    zip_name: "esp32s2-generic.zip" }
          - { name: "esp32s3-generic", idf_target: "esp32s3", sdkconfig_file: "configs/sdkconfig.default.esp32s3",    zip_name: "esp32s3-generic.zip" }
          - { name: "esp32c3-generic", idf_target: "esp32c3", sdkconfig_file: "configs/sdkconfig.default.esp32c3",    zip_name: "esp32c3-generic.zip" }
          - { name: "esp32c6-generic", idf_target: "esp32c6", sdkconfig_file: "configs/sdkconfig.default.esp32c6",    zip_name: "esp32c6-generic.zip" }
          - { name: "Awok V5",         idf_target: "esp32s2", sdkconfig_file: "configs/sdkconfig.default.esp32s2",    zip_name: "esp32v5_awok.zip" }
          - { name: "ghostboard",      idf_target: "esp32c6", sdkconfig_file: "configs/sdkconfig.ghostboard",         zip_name: "ghostboard.zip" }
          - { name: "MarauderV4_FlipperHub", idf_target: "esp32", sdkconfig_file: "configs/sdkconfig.marauderv4",     zip_name: "MarauderV4_FlipperHub.zip" }
          - { name: "MarauderV6&AwokDual",   idf_target: "esp32", sdkconfig_file: "configs/sdkconfig.marauderv6",     zip_name: "MarauderV6_AwokDual.zip" }
          - { name: "AwokMini",        idf_target: "esp32",   sdkconfig_file: "configs/sdkconfig.awokmini",           zip_name: "AwokMini.zip" }
          - { name: "ESP32-S3-Cardputer", idf_target: "esp32s3", sdkconfig_file: "configs/sdkconfig.cardputer",       zip_name: "ESP32-S3-Cardputer.zip" }
          - { name: "CYD2USB",         idf_target: "esp32",   sdkconfig_file: "configs/sdkconfig.CYD2USB",            zip_name: "CYD2USB.zip" }
          - { name: "CYDMicroUSB",     idf_target: "esp32",   sdkconfig_file: "configs/sdkconfig.CYDMicroUSB",        zip_name: "CYDMicroUSB.zip" }
          - { name: "CYDDualUSB",      idf_target: "esp32",   sdkconfig_file: "configs/sdkconfig.CYDDualUSB",         zip_name: "CYDDualUSB.zip" }
          - { name: "CYD2USB2.4_Inch", idf_target: "esp32",   sdkconfig_file: "configs/sdkconfig.CYD2USB2.4Inch",     zip_name: "CYD2USB2.4Inch.zip" }
          - { name: "CYD2USB2.4_Inch_C", idf_target: "esp32", sdkconfig_file: "configs/sdkconfig.CYD2USB2.4Inch_C_Varient", zip_name: "CYD2USB2.4Inch_C.zip" }
          - { name: "Waveshare_LCD",   idf_target: "esp32s3", sdkconfig_file: "configs/sdkconfig.waveshare7inch",     zip_name: "Waveshare_LCD.zip" }
          - { name: "Crowtech_LCD",    idf_target: "esp32s3", sdkconfig_file: "configs/sdkconfig.crowtech7inch",      zip_name: "Crowtech_LCD.zip" }

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.9"

      # â€¦ all your existing build / package steps stay exactly the same â€¦

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.zip_name }}
          path: ${{ matrix.target.zip_name }}

  upload_all:
    name: Upload Artifacts
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          path: all_artifacts

      # Flatten artefacts (unchanged)
      - name: Verify and Flatten Artifacts
        run: |
          mkdir -p flat_artifacts
          find all_artifacts -type f -exec cp {} flat_artifacts/ \;
          ls -lh flat_artifacts

      # -------------------------------
      # â›”  ðŸ‘‡  Cloudflareâ€‘specific logic **REMOVED**
      #     â€¢ Fetch boards.json
      #     â€¢ Login / token generation
      #     â€¢ Update supported boards list
      #     â€¢ Upload ZIPs to api.spookytools.com
      # -------------------------------

      # -----------------------------------------
      # ðŸ“¦  Upload every zip to the LATEST release
      # -----------------------------------------
      - name: Check Existing Release Assets
        id: check_release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          latest_release=$(gh api repos/${{ github.repository }}/releases --jq '.[0]')
          release_id=$(echo "$latest_release" | jq -r '.id')
          assets=$(echo "$latest_release" | jq -r '.assets[].name')
          all_exist=true
          for file in flat_artifacts/*.zip; do
            filename=$(basename "$file")
            if ! echo "$assets" | grep -q "$filename"; then
              all_exist=false
              break
            fi
          done
          echo "release_id=$release_id" >> $GITHUB_OUTPUT
          echo "all_exist=$all_exist"   >> $GITHUB_OUTPUT

      - name: Upload to Release
        if: steps.check_release.outputs.all_exist != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          for file in flat_artifacts/*.zip; do
            filename=$(basename "$file")
            echo "Uploading $filenameâ€¦"
            curl -s -H "Authorization: token $GITHUB_TOKEN" \
                 -H "Content-Type: application/zip"          \
                 --data-binary @"$file"                      \
                 "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.check_release.outputs.release_id }}/assets?name=$filename"
          done
