name: Compile

on:
  workflow_dispatch:
    inputs:
      version:
        description: "Enter the release version (e.g. v1.0.0)"
        required: true
        type: string
      buildType:
        description: "Select the build type"
        required: true
        type: choice
        options:
          - "prerelease"
          - "all"
        default: "prerelease"

jobs:
  build:
    name: Build for ${{ matrix.target.name }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        target:
          - { name: "esp32-generic", idf_target: "esp32", sdkconfig_file: "configs/sdkconfig.default.esp32", zip_name: "esp32-generic.zip" }
          # (... the rest of your matrix targets ...)

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install ESP-IDF
        run: |
          sudo apt-get update
          sudo apt-get install -y wget git flex bison gperf python3-pip python3-setuptools cmake ninja-build ccache libffi-dev libssl-dev dfu-util
          git clone -b v5.3.1 --depth 1 https://github.com/espressif/esp-idf.git ~/esp-idf
          ~/esp-idf/install.sh

      - name: Apply Custom SDK Config
        run: cp "${{ matrix.target.sdkconfig_file }}" sdkconfig.defaults

      - name: Set up ESP-IDF and Target
        run: |
          . ~/esp-idf/export.sh
          export IDF_TARGET=${{ matrix.target.idf_target }}
          echo "IDF_TARGET=${{ matrix.target.idf_target }}" >> $GITHUB_ENV

      - name: Clean and Build Project
        env:
          SDKCONFIG_DEFAULTS: "sdkconfig.defaults"
        run: |
          . ~/esp-idf/export.sh
          idf.py clean
          idf.py build || {
            echo "Build failed for ${{ matrix.target.name }}"
            exit 1
          }

      - name: Package Artifacts into ZIP
        run: |
          ARTIFACT_DIR="packaged_artifacts"
          ZIP_FILE="${{ matrix.target.zip_name }}"
          mkdir -p "$ARTIFACT_DIR"
          cp build/partition_table/partition-table.bin "$ARTIFACT_DIR/" || exit 1
          cp build/*.bin "$ARTIFACT_DIR/" || exit 1
          cd "$ARTIFACT_DIR"
          zip "../$ZIP_FILE" ./* || exit 1
          cd ..

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.target.zip_name }}
          path: ${{ matrix.target.zip_name }}

  release:
    name: Upload to GitHub Release
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v4
        with:
          path: all_artifacts

      - name: Flatten Artifact Files
        run: |
          mkdir -p flat_artifacts
          find all_artifacts -type f -name "*.zip" -exec cp {} flat_artifacts/ \;

      - name: Create GitHub Release (if needed)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag=${{ github.event.inputs.version }}
          if ! gh release view "$tag" > /dev/null 2>&1; then
            gh release create "$tag" --title "$tag" --notes "Automated build for $tag"
          fi

      - name: Upload ZIPs to GitHub Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          tag=${{ github.event.inputs.version }}
          for file in flat_artifacts/*.zip; do
            echo "Uploading $file to release $tag..."
            gh release upload "$tag" "$file" --clobber
          done
