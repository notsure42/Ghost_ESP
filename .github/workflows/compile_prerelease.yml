name: Compile and Create Pre-release

on:
  workflow_dispatch:
    inputs:
      buildType:
        description: "Select the build type"
        required: true
        type: choice
        options:
          - "prerelease" # Focus on pre-release creation as requested
          - "all"        # Kept for potential future use, but upload logic focuses on pre-release
        default: "prerelease"

jobs:
  build:
    name: Build for ${{ matrix.target.name }}
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target:
          # Keep your existing build matrix
          - { name: "esp32-generic", idf_target: "esp32",   sdkconfig_file: "configs/sdkconfig.default.esp32",      zip_name: "esp32-generic.zip" }
          - { name: "esp32s2-generic", idf_target: "esp32s2", sdkconfig_file: "configs/sdkconfig.default.esp32s2",    zip_name: "esp32s2-generic.zip" }
          - { name: "esp32s3-generic", idf_target: "esp32s3", sdkconfig_file: "configs/sdkconfig.default.esp32s3",    zip_name: "esp32s3-generic.zip" }
          - { name: "esp32c3-generic", idf_target: "esp32c3", sdkconfig_file: "configs/sdkconfig.default.esp32c3",    zip_name: "esp32c3-generic.zip" }
          - { name: "esp32c6-generic", idf_target: "esp32c6", sdkconfig_file: "configs/sdkconfig.default.esp32c6",    zip_name: "esp32c6-generic.zip" }
          - { name: "Awok V5",         idf_target: "esp32s2", sdkconfig_file: "configs/sdkconfig.default.esp32s2",    zip_name: "esp32v5_awok.zip" }
          - { name: "ghostboard",      idf_target: "esp32c6", sdkconfig_file: "configs/sdkconfig.ghostboard",         zip_name: "ghostboard.zip" }
          - { name: "MarauderV4_FlipperHub", idf_target: "esp32", sdkconfig_file: "configs/sdkconfig.marauderv4",     zip_name: "MarauderV4_FlipperHub.zip" }
          - { name: "MarauderV6&AwokDual",   idf_target: "esp32", sdkconfig_file: "configs/sdkconfig.marauderv6",     zip_name: "MarauderV6_AwokDual.zip" }
          - { name: "AwokMini",        idf_target: "esp32",   sdkconfig_file: "configs/sdkconfig.awokmini",           zip_name: "AwokMini.zip" }
          - { name: "ESP32-S3-Cardputer", idf_target: "esp32s3", sdkconfig_file: "configs/sdkconfig.cardputer",       zip_name: "ESP32-S3-Cardputer.zip" }
          - { name: "CYD2USB",         idf_target: "esp32",   sdkconfig_file: "configs/sdkconfig.CYD2USB",            zip_name: "CYD2USB.zip" }
          - { name: "CYDMicroUSB",     idf_target: "esp32",   sdkconfig_file: "configs/sdkconfig.CYDMicroUSB",        zip_name: "CYDMicroUSB.zip" }
          - { name: "CYDDualUSB",      idf_target: "esp32",   sdkconfig_file: "configs/sdkconfig.CYDDualUSB",         zip_name: "CYDDualUSB.zip" }
          - { name: "CYD2USB2.4_Inch", idf_target: "esp32",   sdkconfig_file: "configs/sdkconfig.CYD2USB2.4Inch",     zip_name: "CYD2USB2.4Inch.zip" }
          - { name: "CYD2USB2.4_Inch_C", idf_target: "esp32", sdkconfig_file: "configs/sdkconfig.CYD2USB2.4Inch_C_Varient", zip_name: "CYD2USB2.4Inch_C.zip" }
          - { name: "Waveshare_LCD",   idf_target: "esp32s3", sdkconfig_file: "configs/sdkconfig.waveshare7inch",     zip_name: "Waveshare_LCD.zip" }
          - { name: "Crowtech_LCD",    idf_target: "esp32s3", sdkconfig_file: "configs/sdkconfig.crowtech7inch",      zip_name: "Crowtech_LCD.zip" }

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.9'

      - name: Install ESP-IDF Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget git flex bison gperf python3-pip python3-setuptools cmake ninja-build ccache libffi-dev libssl-dev dfu-util

      - name: Install ESP-IDF v5.3.1
        run: |
          git clone -b v5.3.1 --depth 1 --recursive https://github.com/espressif/esp-idf.git ~/esp-idf
          ~/esp-idf/install.sh esp32,esp32s2,esp32s3,esp32c3,esp32c6 # Specify all targets needed

      - name: Apply Custom SDK Config
        run: cp "${{ matrix.target.sdkconfig_file }}" sdkconfig.defaults

      - name: Set up ESP-IDF Environment
        run: |
          . ~/esp-idf/export.sh
          export IDF_TARGET=${{ matrix.target.idf_target }}
          echo "IDF_TARGET=${{ matrix.target.idf_target }}" >> $GITHUB_ENV
          echo "Using IDF_TARGET: ${{ matrix.target.idf_target }}"

      - name: Clean and Build Project
        env:
          SDKCONFIG_DEFAULTS: "sdkconfig.defaults"
        run: |
          . ~/esp-idf/export.sh
          idf.py clean
          idf.py build || {
            echo "Build failed for ${{ matrix.target.name }}"
            exit 1
          }

      - name: Download Custom Bootloader
        run: |
          BOOTLOADER_URL="https://cdn.spookytools.com/bootloaders/${{ matrix.target.idf_target }}.bin"
          BOOTLOADER_PATH="build/bootloader/bootloader.bin" # Correct path for bootloader binary
          echo "Downloading bootloader from $BOOTLOADER_URL..."
          curl -f -L -o "$BOOTLOADER_PATH" "$BOOTLOADER_URL" || {
            echo "Error: Bootloader download failed from $BOOTLOADER_URL."
            # Optional: Fallback to default if needed, or just fail
            # echo "Falling back to default bootloader build..."
            # cd build/bootloader && ninja && cd ../.. || exit 1
            exit 1
          }
          if [ ! -f "$BOOTLOADER_PATH" ]; then
            echo "Error: Bootloader file not found at $BOOTLOADER_PATH after download."
            exit 1
          fi
          echo "Bootloader downloaded successfully to $BOOTLOADER_PATH."

      - name: Package Artifacts into ZIP
        run: |
          ARTIFACT_DIR="packaged_artifacts_${{ matrix.target.name }}" # Unique dir per target
          ZIP_FILE="${{ matrix.target.zip_name }}"
          mkdir -p "$ARTIFACT_DIR"
          # Copy partition table
          cp build/partition_table/partition-table.bin "$ARTIFACT_DIR/partitions.bin" || { echo "Failed to copy partition table"; exit 1; }
          # Copy bootloader
          cp build/bootloader/bootloader.bin "$ARTIFACT_DIR/bootloader.bin" || { echo "Failed to copy bootloader"; exit 1; }
           # Copy app binary
          cp build/*.bin "$ARTIFACT_DIR/firmware.bin" || { echo "Failed to copy app binary"; exit 1; }

          echo "Contents of $ARTIFACT_DIR:"
          ls -l "$ARTIFACT_DIR"

          # Create the zip file from the artifact directory
          zip -j "$ZIP_FILE" "$ARTIFACT_DIR"/* || { echo "Failed to create ZIP $ZIP_FILE"; exit 1; }

          echo "Created ZIP:"
          ls -lh "$ZIP_FILE"

      - uses: actions/upload-artifact@v4
        with:
          name: build_${{ matrix.target.name }} # Unique artifact name per build
          path: ${{ matrix.target.zip_name }}

  upload_prerelease:
    name: Create Pre-release and Upload Artifacts
    needs: build
    # Only run this job if the buildType input was 'prerelease'
    if: github.event.inputs.buildType == 'prerelease'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Needed for gh release create

      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: all_build_artifacts # Download all artifacts to this directory

      - name: Verify and Prepare Artifacts for Upload
        run: |
          mkdir -p release_assets
          # Find all artifact directories (build_*) and copy the zip file from each
          find all_build_artifacts -mindepth 1 -maxdepth 1 -type d -name 'build_*' -exec find {} -name '*.zip' -exec cp {} release_assets/ \;
          echo "Prepared release assets:"
          ls -lh release_assets

      - name: Generate Pre-release Tag and Title
        id: pre_release_info
        run: |
          TAG_NAME="prerelease-$(date +'%Y%m%d-%H%M%S')-${GITHUB_SHA::7}" # Add short SHA for uniqueness
          TITLE="Pre-release $(date +'%Y-%m-%d %H:%M:%S')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "release_title=$TITLE" >> $GITHUB_OUTPUT
          echo "Generated Tag: $TAG_NAME"
          echo "Generated Title: $TITLE"

      - name: Create GitHub Pre-Release and Upload Assets
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG: ${{ steps.pre_release_info.outputs.tag_name }}
          TITLE: ${{ steps.pre_release_info.outputs.release_title }}
        run: |
          echo "Creating pre-release with tag $TAG and title '$TITLE'"
          # Check if there are assets to upload
          if [ -z "$(ls -A release_assets/*.zip 2>/dev/null)" ]; then
             echo "No ZIP files found in release_assets. Creating pre-release without assets."
             gh release create "$TAG" \
               --repo "$GITHUB_REPOSITORY" \
               --title "$TITLE" \
               --notes "Automated pre-release build (no assets generated or found)." \
               --prerelease
          else
             echo "Uploading assets from release_assets:"
             ls -l release_assets/*.zip
             gh release create "$TAG" \
               --repo "$GITHUB_REPOSITORY" \
               --title "$TITLE" \
               --notes "Automated pre-release build." \
               --prerelease \
               release_assets/*.zip # Upload all zip files found
          fi
          echo "Pre-release creation attempted."
