name: Compile Test Build esp32c5 (v5.4.1)

on:
  workflow_dispatch: # Manual trigger

jobs:
  build:
    name: Build for ${{ matrix.target.name }} (v5.4.1)
    runs-on: ubuntu-latest

    strategy:
      matrix:
        target:
          - { name: "esp32c5-generic", idf_target: "esp32c5", zip_name: "esp32c5-generic.zip" }

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Keep consistent with previous workflow, v5.4 might prefer newer but 3.9 is safe

      - name: Install ESP-IDF Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y wget git flex bison gperf python3-pip python3-setuptools cmake ninja-build ccache libffi-dev libssl-dev dfu-util

      - name: Install ESP-IDF v5.4.1
        run: |
          git clone -b v5.4.1 --depth 1 --recursive https://github.com/espressif/esp-idf.git ~/esp-idf
          ~/esp-idf/install.sh esp32c5 # Specify target

      - name: Set up ESP-IDF Environment
        run: |
          . ~/esp-idf/export.sh
          export IDF_TARGET=${{ matrix.target.idf_target }}
          echo "IDF_TARGET=${{ matrix.target.idf_target }}" >> $GITHUB_ENV
          echo "Using IDF_TARGET: ${{ matrix.target.idf_target }}"

      - name: Clean and Build Project
        run: |
          . ~/esp-idf/export.sh
          idf.py clean
          idf.py build || {
            echo "Build failed for ${{ matrix.target.name }}"
            exit 1
          }

      - name: Package Artifacts into ZIP
        run: |
          ARTIFACT_DIR="packaged_artifacts_${{ matrix.target.name }}" # Unique dir per target
          ZIP_FILE="${{ matrix.target.zip_name }}"
          mkdir -p "$ARTIFACT_DIR"
          # Copy partition table
          cp build/partition_table/partition-table.bin "$ARTIFACT_DIR/partitions.bin" || { echo "Failed to copy partition table"; exit 1; }
          # Copy bootloader
          cp build/bootloader/bootloader.bin "$ARTIFACT_DIR/bootloader.bin" || { echo "Failed to copy bootloader"; exit 1; }
           # Copy app binary
          cp build/*.bin "$ARTIFACT_DIR/firmware.bin" || { echo "Failed to copy app binary"; exit 1; }

          echo "Contents of $ARTIFACT_DIR:"
          ls -l "$ARTIFACT_DIR"

          # Create the zip file from the artifact directory
          zip -j "$ZIP_FILE" "$ARTIFACT_DIR"/* || { echo "Failed to create ZIP $ZIP_FILE"; exit 1; }

          echo "Created ZIP:"
          ls -lh "$ZIP_FILE"

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build_${{ matrix.target.name }} # Unique artifact name per build
          path: ${{ matrix.target.zip_name }}